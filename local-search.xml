<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/12/%5BSWPUCTF%202021%20%E6%96%B0%E7%94%9F%E8%B5%9B%5DPseudoProtocols/"/>
    <url>/2023/04/12/%5BSWPUCTF%202021%20%E6%96%B0%E7%94%9F%E8%B5%9B%5DPseudoProtocols/</url>
    
    <content type="html"><![CDATA[<h1 id="SWPUCTF-2021-新生赛-PseudoProtocols"><a href="#SWPUCTF-2021-新生赛-PseudoProtocols" class="headerlink" title="[SWPUCTF 2021 新生赛]PseudoProtocols"></a>[SWPUCTF 2021 新生赛]PseudoProtocols</h1><p>这一题主要考察了我们php伪协议的知识点，其中利用的两个协议“filter，data协议”</p><p>话不多说直接进入靶机环境</p><p>![屏幕截图 2023-04-12 193620](E:\blog\source\pic\屏幕截图 2023-04-12 193620.png)</p><p>意思就是让我们去找到hint.php,这时候就考虑php:&#x2F;&#x2F;filter协议</p><p>我对filter协议的理解就是利用过滤器，去读取我们想要的文件，其中过滤器可以用各种编码实现，比如最常用的base64编码，具体实现格式就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><p>这样后就直接可以将flag.php的明文以base64的形式显示到界面上。</p><p>这一题也是同样的做法直接将flag.php换位hint.php就可以了。</p><p>![屏幕截图 2023-04-12 194410](E:\blog\source\pic\屏幕截图 2023-04-12 194410.png)</p><p>然后将这些解密，他让我们去访问</p><p>![屏幕截图 2023-04-12 194454](E:\blog\source\pic\屏幕截图 2023-04-12 194454.png)</p><p>然后得到源码</p><p>![屏幕截图 2023-04-12 194526](E:\blog\source\pic\屏幕截图 2023-04-12 194526.png)</p><p>这段PHP代码的作用是：</p><ol><li>将PHP脚本的最大执行时间设置为180秒。</li><li>显示当前文件的源代码。</li><li>包含一个名为“flag.php”的文件，该文件包含了一个标志变量。</li><li>从GET参数中获取一个名为“a”的变量。</li><li>如果“a”变量被设置，并且读取“a”变量的文件内容等于“I want flag”，则输出“success”和标志变量的值。</li></ol><p>这段代码存在一个漏洞，即可以通过将“a”变量设置为一个包含“I want flag”的文件路径来读取标志变量的值。</p><p>然后我们就可以用到data协议去访问一个包括 I want flag的文件路径</p><p>data协议：data协议是一种特殊的URL协议，可以将数据直接嵌入到URL中，而无需使用外部文件或数据源。data协议的语法如下：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>:[&lt;media <span class="hljs-keyword">type</span>&gt;][;base64],&lt;<span class="hljs-keyword">data</span>&gt;；前两个变量可以不要</span><br></code></pre></td></tr></table></figure><p>具体用法就如下payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">payload=?a=data:<span class="hljs-comment">//text/666,I want flag</span><br><span class="hljs-comment">//正确用法text/后面跟的是plain我这里用的666，但flag也出来了。</span><br></code></pre></td></tr></table></figure><p>![屏幕截图 2023-04-12 194842](E:\blog\source\pic\屏幕截图 2023-04-12 194842.png)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>wenzi</title>
    <link href="/2023/04/11/wenzi/"/>
    <url>/2023/04/11/wenzi/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/04/11/hello-world/"/>
    <url>/2023/04/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
